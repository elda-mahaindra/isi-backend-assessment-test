// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: accounts.sql

package sqlc

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
    customer_id,
    no_rekening,
    saldo
) VALUES (
    $1, $2, 0
) RETURNING created_at, customer_id, no_rekening, saldo
`

type CreateAccountParams struct {
	CustomerID int64  `json:"customer_id"`
	NoRekening string `json:"no_rekening"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount, arg.CustomerID, arg.NoRekening)
	var i Account
	err := row.Scan(
		&i.CreatedAt,
		&i.CustomerID,
		&i.NoRekening,
		&i.Saldo,
	)
	return i, err
}

const getAccount = `-- name: GetAccount :one
SELECT created_at, customer_id, no_rekening, saldo FROM accounts
WHERE no_rekening = $1
`

func (q *Queries) GetAccount(ctx context.Context, noRekening string) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, noRekening)
	var i Account
	err := row.Scan(
		&i.CreatedAt,
		&i.CustomerID,
		&i.NoRekening,
		&i.Saldo,
	)
	return i, err
}

const updateSaldo = `-- name: UpdateSaldo :one
UPDATE accounts
SET saldo = $2
WHERE no_rekening = $1
RETURNING created_at, customer_id, no_rekening, saldo
`

type UpdateSaldoParams struct {
	NoRekening string `json:"no_rekening"`
	Saldo      int64  `json:"saldo"`
}

func (q *Queries) UpdateSaldo(ctx context.Context, arg UpdateSaldoParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateSaldo, arg.NoRekening, arg.Saldo)
	var i Account
	err := row.Scan(
		&i.CreatedAt,
		&i.CustomerID,
		&i.NoRekening,
		&i.Saldo,
	)
	return i, err
}
